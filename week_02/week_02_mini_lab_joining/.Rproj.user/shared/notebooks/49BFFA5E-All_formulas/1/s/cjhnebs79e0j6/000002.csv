"0","```r

# current version
movie_data %>%
  select(everything()) %>%
  #  mutate(total_count = nrow(.) * ncol(.)) %>%
  summarise_all(list(
    NA_count = ~ sum(is.na(.)),
    Empty_count = ~ sum(. == \"\", na.rm = TRUE)
  )) %>%
  pivot_longer(cols = everything(),
               names_to = \"columns\",
               values_to = \"Empty_count\") %>%
  filter(Empty_count != 0) %>%
  arrange(desc(Empty_count)) %>%
  ggplot(aes(y = reorder(columns, desc(Empty_count)),
             x = Empty_count,
             fill = Empty_count)) +
  geom_col() +
  geom_label(aes(label = Empty_count)) +
  annotate(\"text\",
           x = Inf,
           y = Inf,
           label = paste(\"total cells:\",
                         nrow(movie_data) * ncol(movie_data),
                         \" nrows\",
                         nrow(movie_data)),
           hjust = 1.1,
           vjust = 1.1,
           size = 3,
           color = \"black\") +
  scale_fill_distiller(palette = \"Spectral\") +
  theme_minimal() +
  labs(title = \"a) Empty & NA Cell Count\",
       x = \"Number of empty cells\",
       y = \"Columns with empty or NA cells\")
# labs(title = paste('a) NA and Empty Cell Count (Total Cells:', nrow(movie_data) * ncol(movie_data), ')'), x = \"Number of empty cells\", y = \"Columns with empty or NA cells\")

# Original version
penguins %>%
  #group_by(species) %>%
   select(everything()) %>% 
  summarise_all(funs(sum(is.na(.)))) %>%
  pivot_longer(cols = 1:7, names_to = 'columns', values_to = 'NA_count') %>%
  arrange(desc(NA_count)) %>%
  ggplot(aes(y = columns, x = NA_count)) + 
  geom_col(fill = 'darkorange') +
  geom_label(aes(label = NA_count)) +
#   scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +
  theme_minimal() +
  labs(title = 'Penguins - NA Count')

# looking for gaps in the data - if nothing else the data is complete!
project_management %>%
  select(everything()) %>% 
  summarise_all(funs(sum(is.na(.)))) %>%
  pivot_longer(cols = 1:3, names_to = 'columns', values_to = 'NA_count') %>%
  filter(NA_count != 0) %>% # 61 columns is quite difficult to read so I'm cutting it down.
#  arrange(desc(NA_count)) %>% # I haven't figured out how to get the table to arrange yet
  ggplot(aes(y = columns, x = NA_count)) + 
  geom_col(fill = 'darkorange') +
  geom_label(aes(label = NA_count)) +
#   scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +
  theme_minimal() +
  labs(title = 'a) project_management - NA Count')

# updated version
raw_data_cleaned %>%
  select(everything()) %>% # this selects everything
  summarise_all(~ sum(is.na(.))) %>% # this summarises 
  pivot_longer(cols = seq_len(ncol(.)), names_to = 'columns', values_to = 'NA_count') %>%
  filter(NA_count != 0) %>%
  arrange(desc(NA_count)) %>%
  ggplot(aes(y = reorder(columns, NA_count), x = NA_count, fill = NA_count)) +
  geom_col() + 
  geom_label(aes(label = NA_count)) +
  scale_fill_distiller(palette = \"Spectral\") +
  theme_minimal() +
  labs(title = 'a) raw_data_cleaned - NA Count', x = \"Number of missing values\", y = \"Columns with missing values\")

raw_data_cleaned %>%
  select(everything()) %>% # this selects everything
  summarise_all(~ sum(is.na(.))) %>% # The code summarise_all(~ sum(is.na(.))) is a function from the dplyr package in R. It takes a data frame as input and returns a data frame with the number of missing values in each column.

# The summarise_all() function is a generic function that can be used to summarize a data frame by applying a function to each column. In this case, the function that is being applied to each column is sum(is.na(.)). The is.na() function returns a logical vector that indicates whether each element in a vector is missing. The sum() function sums the elements in a vector.

# So, the summarise_all(~ sum(is.na(.))) function returns a data frame with one column for each column in the input data frame. The column name is the name of the column in the input data frame, and the value in the column is the number of missing values in that column.
  pivot_longer(cols = seq_len(ncol(.)), names_to = 'columns', values_to = 'NA_count') %>%
  filter(NA_count != 0) %>%
  arrange(desc(NA_count)) %>%
  ggplot(aes(y = reorder(columns, NA_count), x = NA_count, fill = NA_count)) +
  geom_col() + 
  geom_label(aes(label = NA_count)) +
  scale_fill_distiller(palette = \"Spectral\") +
  theme_minimal() +
  labs(title = 'a) raw_data_cleaned - NA Count', x = \"Number of missing values\", y = \"Columns with missing values\")




md.pattern(growth_of_output, rotate.names = TRUE)

mice_plot <- aggr(goo_test, col=c('navyblue','yellow'),
                    numbers=TRUE, sortVars=TRUE,
                    labels=names(goo_test), cex.axis=.7,
                    gap=3, ylab=c(\"Missing data\",\"Pattern\"))

# Select rows with at least one NA value
raw_data_trimmed_test <- raw_data_trimmed %>%
  filter(rowSums(is.na(.)) > 0)



# Create a missing data frame
missing_df <- as_tibble(map_df(raw_data_cleaned, ~is.na(.)))

# Create a missingness summary
missing_summary <- missing_df %>%
  summarise_all(funs(sum(.)/n()))

# Reshape the summary for plotting
missing_summary_long <- missing_summary %>%
  gather(variable, missing_pct)

# Create a bar plot
ggplot(missing_summary_long, aes(x = variable, y = missing_pct)) +
  geom_bar(stat = \"identity\", fill = \"#56B4E9\") +
  labs(
    title = \"Missing Data Summary\",
    x = \"Variables\",
    y = \"Percentage Missing\"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Check if anything doesn't match
raw_data_trimmed %>% 
  filter(field_office != field_office_status) %>% 
  select(field_office, field_office_status) %>% 
  unique()
```"
