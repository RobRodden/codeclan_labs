"0","```r
# Get all object names in the environment
all_objects <- ls()

# Loop through each object and check if it's a data frame
for (obj in all_objects) {
  if (is.data.frame(get(obj))) {
    print(paste(\"Data for:\", obj))
    glimpse(get(obj)) # view the glimpse of the data
  }
}

matching_pairs <- list()

# Create combinations of columns to compare
column_combinations <- combn(names(raw_data_cleaned), 2, simplify = FALSE)

# Iterate through the column combinations
for (combination in column_combinations) {
  col1 <- combination[[1]]
  col2 <- combination[[2]]
  
  # Check if the columns are identical
  if (identical(raw_data_cleaned[[col1]], raw_data_cleaned[[col2]])) {
    matching_pair <- c(col1, col2)
    matching_pairs <- append(matching_pairs, matching_pair)
    print(paste(\"Columns\", col1, \"and\", col2, \"are identical.\"))
  }
}

# Print the list of matching column pairs
# print(matching_pairs)


columns_to_summarize <- c(
  c(\"source\", \"unique_id\", \"vs\"),
  c(\"primary_industry_team\", \"primary_industry_team_2\"),
  c(\"region_area2\", \"region_2\"),
  c(\"delivered_product_date_exclude_before_or_after_date\", \"scottish_int_exporter_after_1st_october_2014\"),
  c(\"product_id_crm_name_t_code\", \"product_id_crm_name_t_code_2\"),
  c(\"company\", \"company_2\")
)

summary_data <- data.frame()  # Initialize an empty data frame

for (columns in columns_to_summarize) {
  summary <- raw_data_cleaned %>%
    select(all_of(columns)) %>%
    pivot_longer(everything(), names_to = \"Column\", values_to = \"Value\") %>%
    group_by(Column, Value) %>%
    summarise(Count = n()) %>% 
    arrange(desc(Count))
  
  summary_data <- bind_rows(summary_data, summary)
}

print(summary_data)

date_columns <- c(\"delivery_date\", \"estimated_close_date\", \"download_date\") # identifying the date columns and putting them in a string

for (col in date_columns) {
  raw_data_cleaned[[col]] <- as.Date(as.numeric(raw_data_cleaned[[col]]), origin = \"1899-12-30\") # 
}

head(raw_data_cleaned) %>% select(all_of(date_columns))

# The above code appears to be working with date columns in a dataset. Let's break down each part:

# date_columns <- c(\"delivery_date\", \"estimated_close_date\", \"download_date\"):  This line defines a character vector named date_columns containing the names of columns in the dataset that are assumed to contain date information. The columns listed are \"delivery_date,\" \"estimated_close_date,\" and \"download_date.\"

# for (col in date_columns) { ... }: This is a for loop that iterates through each column name in the date_columns vector.

# raw_data_cleaned[[col]] <- as.Date(as.numeric(raw_data_cleaned[[col]]), origin = \"1899-12-30\"): Within the loop, this line performs the following operations:
#   raw_data_cleaned[[col]] selects the column specified by the current value of col (e.g., \"delivery_date\").
#   as.numeric(...) converts the values in the selected column to numeric. This is often used when dates are stored as numeric values, such as Excel date serial numbers.
#   as.Date(..., origin = \"1899-12-30\") then converts the numeric values to Date objects. The origin argument specifies the date from which the numeric values are counted. In this case, it's set to \"1899-12-30,\" which is a common origin for Excel date serial numbers.
# head(raw_data_cleaned) %>% select(all_of(date_columns)): This line displays the first few rows of the raw_data_cleaned dataset, specifically the columns specified in the date_columns vector. The head() function shows the top rows of the dataset, and select(all_of(...)) selects specific columns by name.

# In summary, this code snippet is taking columns assumed to contain date information in a dataset, converting their values from numeric (possibly Excel date serial numbers) to Date objects, and then displaying the resulting date columns for the first few rows of the dataset. This is often necessary when working with date data in R, especially if it originated from Excel.
```"
