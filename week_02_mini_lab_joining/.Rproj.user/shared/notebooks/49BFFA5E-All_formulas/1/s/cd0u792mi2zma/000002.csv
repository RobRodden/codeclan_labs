"0","```r
# The dplyr package
## file:///Users/robrodden/Documents/Codeclan/dr16_classnotes/week_01/day_2/2_dplyr/dplyr.html#10_Pipes:_creating_sequences_of_multiple_operations

# install.packages(\"tidyverse\")
# install.packages('devtools')
devtools::install_github('codeclan/CodeClanData')
library(CodeClanData)


all_deaths
# bonus
library(skimr) # this loads (not install) a package into RStudio
skim(all_deaths)

# Wrangling with dplyr
## The select() function : choosing which variables to keep
select(all_deaths, name, allegiances, gender, nobility, year_of_death)
select(all_deaths, -name)
deaths_no_names <- select(all_deaths, -name)
select(all_deaths, -name, -allegiances, -year_of_death, -gender, -nobility)
select(all_deaths, book1_GoT:book5_DwD)
select(all_deaths, starts_with(\"book\"))
select(all_deaths, contains(\"book\"))
select(all_deaths, year_of_death, book_of_death)

## The filter() function: subsetting your data
filter(all_deaths, allegiances == \"Lannister\")
filter(all_deaths, allegiances != \"Lannister\")
filter(all_deaths, allegiances %in% c(\"House Lannister\", \"Lannister\"))
filter(all_deaths, year_of_death > 299)
filter(all_deaths, year_of_death >= 299)
filter(all_deaths, gender == 0)
filter(all_deaths, allegiances == \"None\")
filter(all_deaths, allegiances == \"Lannister\" & nobility == 1)
filter(all_deaths, allegiances == \"Lannister\" | allegiances == \"House Stark\")
filter(all_deaths, book_intro_chapter >= 5 & book_intro_chapter <= 10)
filter(all_deaths, year_of_death <= 299)
filter(all_deaths, gender == 0 & allegiances != \"Lannister\")
filter(all_deaths, name == \"Jon Snow\" | name == \"Daenerys Targaryen\" | name == \"Samwell Tarly\")
filter(all_deaths, name %in% c(\"Jon Snow\", \"Daenerys Targaryen\", \"Samwell Tarly\"))

## The arrange() function: putting your data in order
arrange(all_deaths, gender) #default is ascending order
arrange(all_deaths, desc(book_of_death))
arrange(all_deaths, book_of_death, death_chapter)
arrange(all_deaths, allegiances)
arrange(all_deaths, allegiances, book_intro_chapter)
arrange(all_deaths, desc(year_of_death))

## The mutate() function: creating new variables (columns)
mutate(all_deaths, years_survived = year_of_death - 298, .after = year_of_death)
mutate(all_deaths, book_of_death_test = book_of_death * 5, .after = book_of_death)
mutate(all_deaths, year_of_death = is.na(year_of_death))
mutate(all_deaths, book_of_death = is.character(book_of_death))
mutate(all_deaths, name = as.numeric(name))
mutate(all_deaths, year_of_death = sum(year_of_death, na.rm = T))
mutate(all_deaths, year_of_death = mean(year_of_death, na.rm = T))
mutate(all_deaths, has_no_intro_chapter = is.na(book_intro_chapter))
mutate(all_deaths, nobility = as.logical(nobility))
mutate(all_deaths, n_males = sum(gender))
mutate(all_deaths, book_intro_chapter_amended = is.na(book_intro_chapter), .after = book_intro_chapter)
mutate(all_deaths, nobility = !is.logical(nobility))
mutate(all_deaths, n_males = sum(gender, na.rm = T), .after = gender)

## The summarise() function: summarise your table
summarise(all_deaths, n_males = sum(gender))
deaths_grouped <- group_by(all_deaths, allegiances)
summarise(deaths_grouped, character_count = n())

deaths_grouped2 <- group_by(all_deaths, nobility, gender)
summarise(deaths_grouped2, character_count = n())

have_died <- filter(all_deaths, !is.na(book_of_death))
died_grouped <- group_by(have_died, allegiances)
died_counts <- summarise(died_grouped, count = n())
arrange(died_counts, desc(count))

# Pipes: creating sequences of multiple operations.
all_deaths %>% 
  filter(!is.na(book_of_death)) %>% 
  group_by(allegiances) %>% 
  summarise(
    count = n()
  ) %>% 
  arrange(desc(count))

# Pull
average_year_of_death <- all_deaths %>%
  summarise(average_value = mean(year_of_death, na.rm = TRUE))

average_year_of_death


all_deaths %>%
  mutate(death_later_than_average = year_of_death > average_year_of_death)

all_deaths %>%
  mutate(death_later_than_average = year_of_death > 299)

class(average_year_of_death)
class(299)

average_year_of_death <- all_deaths %>%
  summarise(average_value = mean(year_of_death, na.rm = TRUE)) %>%
  pull()

average_year_of_death
class(average_year_of_death)

all_deaths %>% 
  mutate(death_later_than_average = year_of_death > average_year_of_death, .after = year_of_death)

# alternatively we can pull the value out using a $ eg
all_deaths %>% 
  mutate(death_later_than_average = year_of_death > average_year_of_death$average_value)

# Dplyr Homework with answers
# file:///Users/robrodden/Documents/Codeclan/dr16_classnotes/week_01/day_2/5_homework_dplyr/dplyr_homework_with_answers.html
# let's check if there are any missing values
drinks_content %>%
  select(Beverage_category, Beverage, Beverage_prep, Calories) %>%
  filter(is.na(Calories)) %>%
  summarise(count_of_missing_calories = n())

# create a new variable 
drink_calories <- drinks_content %>%
  mutate(calorie_diff = Calories - 135)

most_calories <- drink_calories %>%
  group_by(Beverage_category) %>%
  summarise(mean_calories = mean(Calories)) %>%
  arrange(desc(mean_calories)) %>%
  head(3)

most_calories

least_calories <- drink_calories %>%
  group_by(Beverage_category) %>%
  summarise(mean_calories = mean(Calories)) %>%
  arrange(mean_calories)%>%
  head(3)

least_calories

# work out the mean calories for each beverage prep 
average_bev_prep <- drink_calories %>%
  group_by(Beverage_prep) %>%
  summarise(mean_cals = mean(Calories)) %>%
  arrange(desc(mean_cals))

average_bev_prep

# find the average calories - and we need to use pull() to be able to use the number in calculations
avg_calories <- drink_calories %>%
                  summarise(mean_calories = mean(Calories)) %>%
                  pull()

avg_calories

# find which prep types have above average calories
above_avg_calories <- average_bev_prep %>%
  filter(mean_cals >= avg_calories)

above_avg_calories

# we also could have done it using mutate and then filter 

average_bev_prep %>%
  mutate(is_greater_than_avg = mean_cals >= avg_calories) %>%
  filter(is_greater_than_avg == TRUE)

head(drink_calories)

drink_calories %>%
  group_by(Beverage_category, Beverage, Beverage_prep) %>%
  summarise(min_calories = min(Calories)) %>%
  arrange(min_calories) %>%
  head(1)

```"
