---
title: "R Notebook"
output: html_notebook
---
Error 1.

Create some_letters which is a character vector containing the following letters: “E”, “R”, “R”, “O” and “R”.
```{r}
# original error
some_letters <- ("E", "R", "R", "O", "R")

# fixed version
some_letters <- c("E", "R", "R", "O", "R")
```

Error 2.

Create message which is a vector containing the following strings: “does”, “this”, “work” and “?”, then convert the vector to uppercase using toupper.
```{r}

# original error
message <- c("does", "this" "work", "?")

toupper(messege)

# fixed version
message <- c("does", "this", "work", "?")

toupper(message)
```

Error 3.

Select columns mpg, cyl, and disp from mtcars and keep only rows where mpg is less than 20..
```{r}
# original error
mtcars %>% 
  select(mpg, cyl, disp) %>>%
  filter(mpg < 20)

# fixed version
library(tidyverse)

mtcars %>% 
  select(mpg, cyl, disp) %>% 
  filter(mpg < 20)
```
Error 4. Select columns Sepal.Length, Sepal.Width, and Species and arrange by Sepal Length.
```{r}
# original error
iris %>% 
  select(Sepal.Width, Species) %>% 
  arrange(Sepal.Length)

# fixed version
iris %>% 
  select(Sepal.Width, Sepal.Length, Species) %>% 
  arrange(Sepal.Length)
```
Error 5.

Find the average tooth length for where the supplement is vitamin C.
```{r}
# original error
ToothGrowth %>%
  summarise(avg_len_vc = mean(len)) %>% 
  filter(supp == "VC")

# fixed version
ToothGrowth %>%
  filter(supp == "VC") %>% 
  summarise(avg_len_vc = mean(len))
  
```
Error 6.

Create a vector of animals (cat, dog, rabbit, horse), then use the sample function to get 10 random animals from those categories.
```{r}
# original error
animals <- c("cat", dog, "rabbit", "horse")
sample(animals, 10)

# fixed version
animals <- c("cat", "dog", "rabbit", "horse")
sample(animals, 2, replace = T)

or
animals2 <- c("cat", "dog", "rabbit", "horse", "llama", "elephant", "mouse", "cat", "buffalo", "duck", "bird")
sample(animals2, 10, replace = T)

or
animals3 <- c("cat", "dog", "rabbit", "horse")
sample(animals3, 10, replace = T)
```
Error 7.

Create dog_names and cat_names, then use intersect to check which common pet names are shared by both dogs and cats.
```{r}
# original error
dog_names <- c("Lucy", "Molly", "Charlie", "Luna", "Bella", "Cooper")

cat_names < c("Luna", "Lily", "Lucy", "Charlie", "Max", "Oliver")

Intersect(dog_names)

# fixed version
dog_names <- c("Lucy", "Molly", "Charlie", "Luna", "Bella", "Cooper")

cat_names <- c("Luna", "Lily", "Lucy", "Charlie", "Max", "Oliver")

intersect(dog_names, cat_names)
```

Error 8.

Filter weights equal to or below 150 grams, then create a new column ‘weight_kg’ that contains the weight in kilograms.
```{r}
# original error
chickwts %>% 
  filter(weight =< 150) %>% 
  mutate(weight_kg == weight * 0.001)

# fixed version
chickwts %>% 
  filter(weight <= 150) %>% 
  mutate(weight_kg = weight * 0.001)
```
Error 9.

Create a tibble with column alphabet which contains the English alphabet and column numbers which has a unique number for each letter. Then remove rows where the letter is A, B or C.
```{r}
# original error
tibble(alphabet = LETTERS(),
       numbers = 1:25) %>% 
  filter(letter != c(A, B, C))

# fixed version
tibble(alphabet = LETTERS,
       numbers = 1:26) %>%
  filter(!(alphabet %in%  c("A", "B", "C")))
```
Error 10.

The chunk below creates the data for this error (don’t change anything in it):
```{r}
set.seed(999)

# original error
scent_ratings <- tibble(
  iD = rep(1:10, each = 5),
  SCENT = rep(c("New book", "Cut grass", "Rose oil", "Fresh linen", "Wet dog"), 10),
  rating = sample(c(0:5, NA), 50, replace = TRUE),
  PersonAge = rep(NA, 50)
)

# fixed version
scent_ratings %>%
  janitor::clean_names() %>% 
  drop_na(rating) %>% 
  group_by(scent) %>% 
  summarise(mean_rating = mean(rating))

```

